#!/bin/bash

library_path="./lib"
new_file="./new"
test_path="./.test_folder"

function clear_test() {
  [ -e "$test_path" ] && rm -r "$test_path"
  if [ ! "${1:-0}" -eq 1 ]
  then
    mkdir -p "$test_path"
  fi
}

function test_new() {
  target_file=$1
  opt=$2
  opt_value=$3
  expected_content=$4
  run_for_result=${5:-0}
  "$new_file" -l "$library_path" "$target_file" $opt "$opt_value" 2>/dev/null
  if [ -f "$test_file" ]
  then
    if [ $run_for_result -eq 0 ] && [ "$(cat $test_file)" = "$expected_content" ]
    then
    return 1
    elif [ $run_for_result -ne 0 ] && [ -x "$test_file" ] && [ "$($test_file)" = "$expected_content" ]
    then
      return 1
    fi
  fi
  return 0
}

echo "Initialisation..."
clear_test

builder_list=(
"index"
"index_sh"
"index_py"
)

model_list=(
"index_txt"
"index_test"
)

runnable_model_list=(
"index_txt_runnable"
"index_test_runnable"
)

error_builder_list=(
"runtime_error_sh"
"syntax_error_py"
)

echo "done"

#
# Check that the default builder is properly called
#
echo "Test default builder"
test_file="$test_path/test.test"
test_new "$test_file" "" "" "index"
echo "$? / 1"
clear_test

#
# Check that builders of different extensions are properly called
#
echo "Test ${#builder_list[@]} builders"
test_file="$test_path/test.test"
success_count=0
for builder in "${builder_list[@]}"
do
  test_new "$test_file" "-b" "$builder" "$builder"
  success_count=$[success_count+$?]
  clear_test
done
echo "$success_count / ${#builder_list[@]}"

#
# Check that models are properly pasted & permissions set to 644
#
echo "Test ${#model_list[@]} not runnable models"
test_file="$test_path/test.test"
success_count=0
permission_errors=0
for model in "${model_list[@]}"
do
  test_new "$test_file" "-b" "$model" "$model"
  success_count=$[success_count+$?]
  if [ "$(stat -c %a "$test_file" 2>/dev/null)" != 644 ]
  then
    permission_errors=$[permission_errors+1]
  fi
  clear_test
done
echo "$success_count / ${#model_list[@]} with $permission_errors permission errors"

#
# Check that models are properly pasted & permissions set to 755
#
echo "Test ${#runnable_model_list[@]} runnable models"
test_file="$test_path/test.test"
success_count=0
permission_errors=0
for model in "${runnable_model_list[@]}"
do
  test_new "$test_file" "-b" "$model" "$model" 1
  success_count=$[success_count+$?]
  if [ "$(stat -c %a "$test_file" 2>/dev/null)" != 755 ]
  then
    permission_errors=$[permission_errors+1]
  fi
  clear_test
done
echo "$success_count / ${#runnable_model_list[@]} with $permission_errors permission errors"

#
# Check new's return value on builder error
#
echo "Test ${#error_builder_list[@]} builders with errors"
test_file="$test_path/test.test"
success_count=0
for model in "${error_builder_list[@]}"
do
  "$new_file" -l "$library_path" "$target_file" "-b" "$model" 2>/dev/null
  if [ $? -ne 0 ]
  then
    success_count=$[success_count+1]
  fi
  clear_test
done
echo "$success_count / ${#error_builder_list[@]}"

#
# Check that parameters are properly passed to builder
#

echo "Test builder parameters"
test_file="$test_path/test.test"
parameters="Parameters test"
test_new "$test_file" "-b write_params -o" "$parameters" "$parameters"
echo "$? / 1"
clear_test

#
# Check files generated by the multiple option
#
echo "Test -m option"
test_files=( "$test_path/test" "$test_path/test.test" )
expected_files=( "test.c" "test.h" "test.test.c" "test.test.h" )
option_value="c,h"
option_names=( "-m" "--multiple" )
success_count=0
for name in "${option_names[@]}"
do
  "$new_file" -l "$library_path" "$name" "$option_value" "${test_files[@]}" >/dev/null
  content=( `ls --file-type "$test_path"` )
  if [ ${#content[@]} -eq ${#expected_files[@]} ]
  then
    error_occured=0
    for file in ${expected_files}
    do
      printf "%s\n" "${content[@]}" | grep "^$file\$" >/dev/null
      [ $? -ne 0 ] && error_occured=1 && break;
      clear_test
    done
    [ $error_occured -eq 0 ] && success_count=$[success_count+1]
  fi
done
echo "$success_count / ${#option_names[@]}"

#
# Check files generated by the picky multiple option
#
echo "Test -M option"
test_files=( "$test_path/test" "$test_path/test.test" )
expected_files=( "test.c" "test.h" "test.test" )
option_value="c,h"
option_names=( "-M" "--multiple-picky" )
success_count=0
for name in "${option_names[@]}"
do
  "$new_file" -l "$library_path" "$name" "$option_value" "${test_files[@]}" >/dev/null
  content=(`ls --file-type "$test_path"`)
  if [ ${#content[@]} -eq ${#expected_files[@]} ]
  then
    error_occured=0
    for file in ${expected_files}
    do
      printf "%s\n" "${content[@]}" | grep "^$file\$" >/dev/null
      [ $? -ne 0 ] && error_occured=1 && break;
      clear_test
    done
    [ $error_occured -eq 0 ] && success_count=$[success_count+1]
  fi
done
echo "$success_count / ${#option_names[@]}"

#
# Check files generated with the extension option
#
echo "Test -e option"
test_file="$test_path/test.test"
success_count=0
option_names=( "-e" "--extension" )
extension="test"
for option in "${option_names[@]}"
do
  test_new "$test_file" "-e" "$extension" "index"
  success_count=$[success_count+$?]
  clear_test
done
echo "$success_count / ${#option_names[@]}"

clear_test 1

